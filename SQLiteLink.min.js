var SQLiteLink=function(){var _db={};this.init=function(args){return open(args.name,args.version,args.description,args.size),$this=this,void 0!==args.procedure&&$this.createTable({name:"procedure",columns:[{name:"id",type:"INTEGER",primary_key:!0},{name:"name",type:"TEXT"},{name:"query",type:"TEXT"},{name:"parameters",type:"TEXT"}]},function(){$this["delete"]("procedure",[],function(){void 0===args.procedure[item].parameters&&(args.procedure[item].parameters=[]);for(var item in args.procedure)$this.insert("procedure",{name:args.procedure[item].name,query:args.procedure[item].query,parameters:JSON.stringify(args.procedure[item].parameters)})})}),this};var open=function(name,version,description,size){if(void 0===name)throw new Error("Database name is not defined");if(void 0===version&&(version=1),void 0===description&&(description=""),void 0===size&&(size=5),!window.openDatabase)throw new Error("Database not supported");var dbSize=1024*size*1024;if(_db=openDatabase(name,version,description,dbSize),!_db)throw new Error("Error Failed to open the database, check version")};this.createTable=function(json_db,callback){if(void 0===json_db)throw new Error("Data is not defined");void 0===callback&&(callback=function(){}),Array.isArray(json_db)||(json_db=[json_db]),_db.transaction(function(tx){for(var table in json_db){var str="";str=str+"CREATE TABLE IF NOT EXISTS "+json_db[table].name+"(";for(var column in json_db[table].columns)str=str+json_db[table].columns[column].name+" "+json_db[table].columns[column].type,json_db[table].columns[column].primary_key&&(str+=" PRIMARY KEY"),json_db[table].columns[column].allow_null&&void 0!==json_db[table].columns[column].allow_null||(str+=" NOT NULL"),str+=", ";str=str.substr(0,str.length-2),str+=")",tx.executeSql(str,[],function(tx,e){callback(tx,e,str)},onError)}})},this.insert=function(table,itens,callback){if(void 0===table)throw new Error("Table is not defined");if(void 0===itens)throw new Error("Itens is not defined");void 0===callback&&(callback=function(){}),_db.transaction(function(tx){Array.isArray(itens)||(itens=[itens]);for(var item in itens){var str="",data=[];str+="INSERT INTO "+table+"(";for(var value in itens[item])str+=value+", ";str=str.substr(0,str.length-2),str+=") VALUES(";for(var value in itens[item])data.push(itens[item][value]),str+="?, ";str=str.substr(0,str.length-2),str+=")",tx.executeSql(str,data,function(tx,e){callback(tx,e,str,data)},onError)}})},this.update=function(table,value,condition,callback){if(void 0===table)throw new Error("Table is not defined");if(void 0===value)throw new Error("Value is not defined");void 0===condition&&(condition=[]),void 0===callback&&(callback=function(){});var str="";str+="UPDATE "+table+" SET ";for(var item in value)"string"==typeof value[item]&&(value[item]='"'+value[item]+'"'),str+=item+" = "+value[item]+", ";str=str.substr(0,str.length-2),condition.length>0&&(str+=" WHERE ");for(var item in condition)"string"==typeof condition[item][2]&&(condition[item][2]='"'+condition[item][2]+'"'),str+=condition[item][0]+" "+condition[item][1]+" "+condition[item][2]+" AND ";condition.length>0&&(str=str.substr(0,str.length-5)),this.query(str,[],function(data,str){callback(data,str)})},this["delete"]=function(table,condition,callback){if(void 0===table)throw new Error("Table is not defined");void 0===condition&&(condition=[]),void 0===callback&&(callback=function(){}),_db.transaction(function(tx){var str="DELETE FROM "+table+" WHERE ";if(condition.length>0){for(var item in condition)"string"==typeof condition[item][2]&&(condition[item][2]='"'+condition[item][2]+'"'),str+=condition[item][0]+" "+condition[item][1]+" "+condition[item][2]+" AND ";str=str.substr(0,str.length-5)}else str=str.substr(0,str.length-7);tx.executeSql(str,[],function(tx,rx){for(var data=[],i=0;i<rx.rows.length;i++)data.push(rx.rows.item(i));callback(data)},onError)})},this.find=function(table,find,order,callback){if(void 0===table)throw new Error("Table is not defined");void 0===find&&(find=[]),void 0===order&&(order=[]),void 0===callback&&(callback=function(){}),_db.transaction(function(tx){var str="SELECT * FROM "+table;find.length>0&&(str+=" WHERE ");for(var item in find)"string"==typeof find[item][2]&&(find[item][2]='"'+find[item][2]+'"'),str+=find[item][0]+" "+find[item][1]+" "+find[item][2]+" AND ";if(find.length>0&&(str=str.substr(0,str.length-5)),order.length>0){str+=" ORDER BY ";for(var item in order)void 0!==order[item][0]&&(str+=order[item][0],str+=void 0!==order[item][1]?" "+order[item][1]+", ":" ASC, ");str=str.substr(0,str.length-2)}tx.executeSql(str,[],function(tx,rx){for(var data=[],i=0;i<rx.rows.length;i++)data.push(rx.rows.item(i));callback(data,str)},onError)})},this.drop=function(table,callback){if(void 0===table)throw new Error("Table is not defined");void 0===callback&&(callback=function(){}),Array.isArray(table)||(table=[table]);var data=[],strA=[];_db.transaction(function(tx){for(var t in table){var str="DROP TABLE "+table[t];strA.push(str),tx.executeSql(str,[],function(tx,rx){data.push(rx)},onError)}}),callback(data,strA)},this.findAll=function(table,order,callback){if(void 0===table)throw new Error("Table is not defined");void 0===order&&(order=[]),void 0===callback&&(callback=function(){}),_db.transaction(function(tx){var str="SELECT * FROM "+table;if(order.length>0){str+=" ORDER BY ";for(var item in order)void 0!==order[item][0]&&(str+=order[item][0],str+=void 0!==order[item][1]?" "+order[item][1]+", ":" ASC, ");str=str.substr(0,str.length-2)}tx.executeSql(str,[],function(tx,rx){for(var data=[],i=0;i<rx.rows.length;i++)data.push(rx.rows.item(i));callback(data,str)},onError)})},this.query=function(sql,data,callback){if(void 0===sql)throw new Error("SQL is not defined");void 0===data&&(data=[]),void 0===callback&&(callback=function(){}),_db.transaction(function(tx){tx.executeSql(sql,data,function(tx,rx){for(var data=[],i=0;i<rx.rows.length;i++)data.push(rx.rows.item(i));callback(data,sql)},onError)})},this.procedure=function(name,data,callback){if($this=this,void 0===name)throw new Error("Name is not defined");void 0===data&&(data={}),this.find("procedure",[["name","=",name]],[],function(result){var _data=[],parameter=JSON.parse(result[0].parameters);for(var item in parameter)_data.push(void 0===data[parameter[item]]?"":data[parameter[item]]);$this.query(result[0].query,_data,callback)})};var onError=function(tx,e){throw new Error(e.message)}};